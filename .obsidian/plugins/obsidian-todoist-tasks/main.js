/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    useWebURL: false
};
class SettingsTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        this.apiToken();
    }
    apiToken() {
        const desc = document.createDocumentFragment();
        desc.createEl('span', null, (span) => {
            span.innerText =
                'The Todoist API token to use. You will need to restart Obsidian after setting this. You can find this token ';
            span.createEl('a', null, (link) => {
                link.href = 'https://todoist.com/prefs/integrations';
                link.innerText = 'here!';
            });
        });
        new obsidian.Setting(this.containerEl)
            .setName('Todoist API token')
            .setDesc(desc)
            .addTextArea((text) => __awaiter(this, void 0, void 0, function* () {
            try {
                text.setValue(yield this.app.vault.adapter.read('.obsidian/todoist-token'));
            }
            catch (e) {
                console.log(e);
            }
            text.onChange((value) => __awaiter(this, void 0, void 0, function* () {
                yield this.app.vault.adapter.write('.obsidian/todoist-token', value);
            }));
        }));
        new obsidian.Setting(this.containerEl)
            .setName('Use web URL for Todoist links')
            .setDesc(desc)
            .addToggle(toggle => toggle
            .setValue(this.plugin.settings.useWebURL)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.useWebURL = value;
            yield this.plugin.saveSettings();
        })));
        const desc2 = document.createDocumentFragment();
        desc2.createEl('p', null, (el) => {
            el.innerText = 'Enter tasks in Obsidian using the Todoist syntax:';
        });
        desc2.createEl('code', null, (el) => {
            el.innerText =
                '- [ ] Task Title #Project @Label1 @Label2 /tomorrow at 3pm !p3 (notes)';
        });
        desc2.createEl('p', null, (el) => {
            el.innerText =
                'Title and Project are required; due date, labels, priority, and notes are optional.  The task title must come first.';
        });
        desc2.createEl('hr');
        desc2.createEl('p', null, (el) => {
            el.innerText =
                'Run the "Create and update tasks in current file" command to create tasks in Todoist and link them back to the syntax.  Tasks will now have a link after them, e.g.';
        });
        desc2.createEl('code', null, (el) => {
            el.innerText =
                '- [ ] Task Title #Project @Label /tomorrow !p3 (notes) [ðŸ”—](todoist://task?id=489345)';
        });
        desc2.createEl('hr');
        desc2.createEl('p', null, (el) => {
            el.innerText =
                'Check off tasks in Todoist or Obsidian, and run the "Create and update tasks in current file" command again to sync Todoist and Obsidian.  Tasks checked off in Obsidian will be completed in Todoist and vice versa.';
        });
        new obsidian.Setting(this.containerEl).setName('Cheat Sheet').setDesc(desc2);
    }
}

class Result {
    static Capture(closure) {
        try {
            return Result.Ok(closure());
        }
        catch (e) {
            return Result.Err(e);
        }
    }
    static Ok(value) {
        let result = new Result();
        result.ok = value;
        return result;
    }
    static Err(err) {
        let result = new Result();
        result.error = err;
        return result;
    }
    static All(first, second, third) {
        if (first.isErr()) {
            return first.intoErr();
        }
        if (second.isErr()) {
            return second.intoErr();
        }
        if (third.isErr()) {
            return third.intoErr();
        }
        return Result.Ok([first.unwrap(), second.unwrap(), third.unwrap()]);
    }
    isOk() {
        return this.ok != null;
    }
    isErr() {
        return this.error != null;
    }
    unwrap() {
        if (!this.isOk()) {
            throw new Error("Called 'unwrap' on a Result with an error.");
        }
        return this.ok;
    }
    unwrapErr() {
        if (!this.isErr()) {
            throw new Error("Called 'unwrapErr' on a Result with a value.");
        }
        return this.error;
    }
    map(func) {
        if (this.isOk()) {
            return Result.Ok(func(this.ok));
        }
        else {
            return this.intoErr();
        }
    }
    unwrapOr(val) {
        return this.isOk() ? this.ok : val;
    }
    intoErr() {
        return Result.Err(this.error);
    }
}

class TodoistAPI {
    constructor(token) {
        this.token = token;
    }
    getTodos() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield fetch('https://api.todoist.com/rest/v1/tasks', {
                    headers: new Headers({
                        Authorization: `Bearer ${this.token}`,
                    }),
                });
                if (result.ok) {
                    return Result.Ok((yield result.json()));
                }
                else {
                    return Result.Err(new Error(yield result.text()));
                }
            }
            catch (e) {
                return Result.Err(e);
            }
        });
    }
    createTodo(linkback, obsidianTodo, todoistProjects, todoistSections, todoistLabels) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            let data = {
                content: `${obsidianTodo.title} ${linkback}`,
                priority: 5 - ((_a = obsidianTodo.priorityLevel) !== null && _a !== void 0 ? _a : 4),
                due_string: obsidianTodo.dueDate,
                label_ids: [],
                description: obsidianTodo.notes,
            };
            let project = todoistProjects.find((project) => project.name == obsidianTodo.project);
            if (project) {
                data.project_id = project.id;
            }
            if (obsidianTodo.section) {
                let section = todoistSections.find((section) => section.name == obsidianTodo.section &&
                    section.project_id == project.id);
                if (section) {
                    data.section_id = section.id;
                }
            }
            if (obsidianTodo.labels.length > 0) {
                obsidianTodo.labels.forEach((obsidianLabel) => {
                    let label = todoistLabels.find((label) => label.name == obsidianLabel);
                    if (label) {
                        data.label_ids.push(label.id);
                    }
                });
            }
            try {
                const result = yield fetch('https://api.todoist.com/rest/v1/tasks', {
                    headers: new Headers({
                        Authorization: `Bearer ${this.token}`,
                        'Content-Type': 'application/json',
                    }),
                    method: 'POST',
                    body: JSON.stringify(data),
                });
                if (result.ok) {
                    return Result.Ok((yield result.json()));
                }
                else {
                    return Result.Err(new Error(yield result.text()));
                }
            }
            catch (e) {
                return Result.Err(e);
            }
        });
    }
    closeTodo(id) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield fetch(`https://api.todoist.com/rest/v1/tasks/${id}/close`, {
                    headers: new Headers({
                        Authorization: `Bearer ${this.token}`,
                    }),
                    method: 'POST',
                });
                return Result.Ok(result.ok);
            }
            catch (e) {
                return Result.Err(e);
            }
        });
    }
    getProjects() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield fetch('https://api.todoist.com/rest/v1/projects', {
                    headers: new Headers({
                        Authorization: `Bearer ${this.token}`,
                    }),
                });
                if (result.ok) {
                    return Result.Ok((yield result.json()));
                }
                else {
                    return Result.Err(new Error(yield result.text()));
                }
            }
            catch (e) {
                return Result.Err(e);
            }
        });
    }
    createProject(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = 'https://api.todoist.com/rest/v1/projects';
            const data = { name: name };
            try {
                const result = yield fetch(url, {
                    method: 'POST',
                    headers: new Headers({
                        Authorization: `Bearer ${this.token}`,
                        'Content-Type': 'application/json',
                    }),
                    body: JSON.stringify(data),
                });
                if (result.ok) {
                    return Result.Ok((yield result.json()));
                }
                else {
                    return Result.Err(new Error('Failed to create project'));
                }
            }
            catch (e) {
                return Result.Err(e);
            }
        });
    }
    getLabels() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield fetch('https://api.todoist.com/rest/v1/labels', {
                    headers: new Headers({
                        Authorization: `Bearer ${this.token}`,
                    }),
                });
                if (result.ok) {
                    return Result.Ok((yield result.json()));
                }
                else {
                    return Result.Err(new Error(yield result.text()));
                }
            }
            catch (e) {
                return Result.Err(e);
            }
        });
    }
    createLabel(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = 'https://api.todoist.com/rest/v1/labels';
            const data = { name: name };
            try {
                const result = yield fetch(url, {
                    method: 'POST',
                    headers: new Headers({
                        Authorization: `Bearer ${this.token}`,
                        'Content-Type': 'application/json',
                    }),
                    body: JSON.stringify(data),
                });
                if (result.ok) {
                    return Result.Ok((yield result.json()));
                }
                else {
                    return Result.Err(new Error('Failed to create label'));
                }
            }
            catch (e) {
                return Result.Err(e);
            }
        });
    }
    getSections() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield fetch('https://api.todoist.com/rest/v1/sections', {
                    headers: new Headers({
                        Authorization: `Bearer ${this.token}`,
                    }),
                });
                if (result.ok) {
                    return Result.Ok((yield result.json()));
                }
                else {
                    return Result.Err(new Error(yield result.text()));
                }
            }
            catch (e) {
                return Result.Err(e);
            }
        });
    }
    createSection(name, project_id) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = 'https://api.todoist.com/rest/v1/sections';
            const data = { name: name, project_id: project_id };
            try {
                const result = yield fetch(url, {
                    method: 'POST',
                    headers: new Headers({
                        Authorization: `Bearer ${this.token}`,
                        'Content-Type': 'application/json',
                    }),
                    body: JSON.stringify(data),
                });
                if (result.ok) {
                    return Result.Ok((yield result.json()));
                }
                else {
                    return Result.Err(new Error('Failed to create label'));
                }
            }
            catch (e) {
                return Result.Err(e);
            }
        });
    }
    createComment(todo_id, content) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = 'https://api.todoist.com/rest/v1/comments';
            const data = {
                task_id: todo_id,
                content: content,
            };
            try {
                const result = yield fetch(url, {
                    method: 'POST',
                    headers: new Headers({
                        Authorization: `Bearer ${this.token}`,
                        'Content-Type': 'application/json',
                    }),
                    body: JSON.stringify(data),
                });
                return Result.Ok(result.ok);
            }
            catch (e) {
                return Result.Err(e);
            }
        });
    }
}

class TodoParser {
    constructor() {
        this.titleRegex = /- \[[ xX]\] ([^@#/!(+\n[]+)/;
        this.projectRegex = /#([^@#/!(+\n[]+)/g;
        this.labelRegex = /@([^@#/!(+\n[]+)/g;
        this.sectionRegex = /\+([^@#/!(+\n[]+)/g;
        this.dueDateRegex = /\/([^@#/!(+\n[]+)/g;
        this.priorityRegex = /!([^@#/!(+\n[]+)/g;
        this.notesRegex = /\(([^\n\)]+)\)/;
        this.linkRegex = /\[[^@#/!(+\n[]+\]\(todoist:\/\/task\?id=(\d+)\)/g;
    }
    parseTodos(app, file) {
        return __awaiter(this, void 0, void 0, function* () {
            let fileContents = yield app.vault.read(file);
            let metadata = app.metadataCache.getFileCache(file);
            let listItems = metadata.listItems;
            let frontMatter = metadata.frontmatter;
            let obsidianTodos = [];
            listItems.forEach((listItem) => {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
                if (listItem.task) {
                    let listItemString = fileContents.substring(listItem.position.start.offset, listItem.position.end.offset);
                    let titleMatch = this.titleRegex.exec(listItemString);
                    let notesMatch = this.notesRegex.exec(listItemString);
                    var projectMatch = this.projectRegex.exec(listItemString);
                    var sectionMatch = this.sectionRegex.exec(listItemString);
                    var dueMatch = this.dueDateRegex.exec(listItemString);
                    var priorityMatch = this.priorityRegex.exec(listItemString);
                    var linkMatch = this.linkRegex.exec(listItemString);
                    if (notesMatch) {
                        let start = notesMatch.index;
                        let end = notesMatch.index + notesMatch[0].length;
                        while (projectMatch &&
                            projectMatch.index > start &&
                            projectMatch.index < end) {
                            projectMatch = this.projectRegex.exec(listItemString);
                        }
                        while (sectionMatch &&
                            sectionMatch.index > start &&
                            sectionMatch.index < end) {
                            sectionMatch = this.sectionRegex.exec(listItemString);
                        }
                        while (dueMatch && dueMatch.index > start && dueMatch.index < end) {
                            dueMatch = this.dueDateRegex.exec(listItemString);
                        }
                        while (priorityMatch &&
                            priorityMatch.index > start &&
                            priorityMatch.index < end) {
                            priorityMatch = this.priorityRegex.exec(listItemString);
                        }
                        while (linkMatch &&
                            linkMatch.index > start &&
                            linkMatch.index < end) {
                            linkMatch = this.linkRegex.exec(listItemString);
                        }
                    }
                    let title = (_a = titleMatch === null || titleMatch === void 0 ? void 0 : titleMatch[1]) === null || _a === void 0 ? void 0 : _a.trim();
                    let project = (_b = projectMatch === null || projectMatch === void 0 ? void 0 : projectMatch[1]) === null || _b === void 0 ? void 0 : _b.trim();
                    let section = (_c = sectionMatch === null || sectionMatch === void 0 ? void 0 : sectionMatch[1]) === null || _c === void 0 ? void 0 : _c.trim();
                    let dueDate = (_d = dueMatch === null || dueMatch === void 0 ? void 0 : dueMatch[1]) === null || _d === void 0 ? void 0 : _d.trim();
                    var dueIndex;
                    var dueLength;
                    if (dueMatch && ((_f = (_e = dueMatch === null || dueMatch === void 0 ? void 0 : dueMatch[0]) === null || _e === void 0 ? void 0 : _e.trim()) === null || _f === void 0 ? void 0 : _f.startsWith('/task'))) {
                        dueIndex = linkMatch === null || linkMatch === void 0 ? void 0 : linkMatch.index;
                        dueLength = 0;
                    }
                    else {
                        dueIndex = (_g = dueMatch === null || dueMatch === void 0 ? void 0 : dueMatch.index) !== null && _g !== void 0 ? _g : linkMatch === null || linkMatch === void 0 ? void 0 : linkMatch.index;
                        dueLength = (_j = (_h = dueMatch === null || dueMatch === void 0 ? void 0 : dueMatch[0]) === null || _h === void 0 ? void 0 : _h.length) !== null && _j !== void 0 ? _j : 0;
                    }
                    let notes = (_k = notesMatch === null || notesMatch === void 0 ? void 0 : notesMatch[1]) === null || _k === void 0 ? void 0 : _k.trim();
                    let priority = parseInt((_m = (_l = priorityMatch === null || priorityMatch === void 0 ? void 0 : priorityMatch[1]) === null || _l === void 0 ? void 0 : _l.trim()) === null || _m === void 0 ? void 0 : _m.substring(1));
                    let link = (_o = linkMatch === null || linkMatch === void 0 ? void 0 : linkMatch[0]) === null || _o === void 0 ? void 0 : _o.trim();
                    var labels = [];
                    var label;
                    do {
                        label = this.labelRegex.exec(listItemString);
                        if (label &&
                            label[1] &&
                            !(notesMatch &&
                                label.index > notesMatch.index &&
                                label.index < notesMatch.index + notesMatch[1].length)) {
                            labels.push(label[1].trim());
                        }
                    } while (label);
                    if (frontMatter) {
                        project = project !== null && project !== void 0 ? project : (_p = frontMatter['project']) === null || _p === void 0 ? void 0 : _p.trim();
                        section = section !== null && section !== void 0 ? section : (_q = frontMatter['section']) === null || _q === void 0 ? void 0 : _q.trim();
                        dueDate = dueDate !== null && dueDate !== void 0 ? dueDate : (_r = frontMatter['dueDate']) === null || _r === void 0 ? void 0 : _r.trim();
                        priority =
                            priority !== null && priority !== void 0 ? priority : parseInt((_t = (_s = frontMatter['priority']) === null || _s === void 0 ? void 0 : _s.trim()) === null || _t === void 0 ? void 0 : _t.substring(1));
                        notes = notes !== null && notes !== void 0 ? notes : (_u = frontMatter['notes']) === null || _u === void 0 ? void 0 : _u.trim();
                        if (frontMatter['label']) {
                            labels = labels.concat(frontMatter['label']
                                .split(',')
                                .map((str) => str.trim()));
                        }
                    }
                    if (title && project) {
                        let todo = {
                            isCompleted: 'xX'.contains(listItemString[3]),
                            title: title,
                            project: project,
                            labels: labels,
                            section: section,
                            dueDate: dueDate,
                            dueIndex: dueIndex,
                            dueLength: dueLength,
                            priorityLevel: priority,
                            notes: notes,
                            link: link,
                            startOffset: listItem.position.start.offset,
                            endOffset: listItem.position.end.offset,
                        };
                        obsidianTodos.push(todo);
                        this.titleRegex.lastIndex = 0;
                        this.projectRegex.lastIndex = 0;
                        this.labelRegex.lastIndex = 0;
                        this.sectionRegex.lastIndex = 0;
                        this.dueDateRegex.lastIndex = 0;
                        this.priorityRegex.lastIndex = 0;
                        this.notesRegex.lastIndex = 0;
                        this.linkRegex.lastIndex = 0;
                    }
                }
            });
            return obsidianTodos;
        });
    }
}

let hashCode = function (string) {
    var hash = 0, i, chr;
    if (string.length === 0)
        return hash;
    for (i = 0; i < string.length; i++) {
        chr = string.charCodeAt(i);
        hash = (hash << 5) - hash + chr;
        hash |= 0;
    }
    return hash;
};

class TodoistTasksPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.todoParser = new TodoParser();
            this.addSettingTab(new SettingsTab(this.app, this));
            obsidian.addIcon('todoist', '<rect id="Rectangle" stroke="currentColor" stroke-width="5" x="13.5" y="13.5" width="73" height="73" rx="10"></rect><line x1="14.5" y1="37.9" x2="25.9" y2="44.9" id="Line" stroke="currentColor" stroke-width="6" stroke-linecap="round"></line><line x1="14.5" y1="51.6" x2="25.9" y2="58.6" id="Line-Copy" stroke="currentColor" stroke-width="6" stroke-linecap="round"></line><line x1="14.5" y1="64.3" x2="25.9" y2="71.3" id="Line-Copy-3" stroke="currentColor" stroke-width="6" stroke-linecap="round"></line><line x1="56.7" y1="27.7" x2="25.9" y2="44.9" id="Line" stroke="currentColor" stroke-width="6" stroke-linecap="round"></line><line x1="56.7" y1="41.4" x2="25.9" y2="58.6" id="Line-Copy-2" stroke="currentColor" stroke-width="6" stroke-linecap="round"></line><line x1="56.7" y1="54.1" x2="25.9" y2="71.3" id="Line-Copy-4" stroke="currentColor" stroke-width="6" stroke-linecap="round"></line>');
            this.addCommand({
                id: 'todoist-create-tasks-from-note',
                name: 'Create and update tasks in current file',
                icon: 'todoist',
                callback: () => __awaiter(this, void 0, void 0, function* () {
                    let file = this.app.workspace.getActiveFile();
                    if (file) {
                        new obsidian.Notice('Updating todos...');
                        var fileContents = yield this.app.vault.read(file);
                        let obsidianTodos = yield this.todoParser.parseTodos(this.app, file);
                        if (obsidianTodos.length == 0) {
                            new obsidian.Notice('Todos updated!');
                            return;
                        }
                        console.log('Fetching todos...');
                        let todoResponse = yield this.api.getTodos();
                        if (!todoResponse.isOk) {
                            console.log(todoResponse.unwrapErr());
                            return;
                        }
                        let todoistTodos = todoResponse.unwrap();
                        var todoistProjects;
                        var todoistLabels;
                        var todoistSections;
                        for (let obsidianTodo of obsidianTodos.reverse()) {
                            if (obsidianTodo.link) {
                                let match = /\[.*?\]\(todoist:\/\/task\?id=(\d.*?)\)/g.exec(obsidianTodo.link);
                                if (!match || !match[1]) {
                                    console.log('Unknown todo');
                                    continue;
                                }
                                let id = parseInt(match[1]);
                                let todoistTodo = todoistTodos.find((todo) => todo.id == id);
                                if (todoistTodo &&
                                    !todoistTodo.completed &&
                                    obsidianTodo.isCompleted) {
                                    this.api.closeTodo(id);
                                    console.log('Completed todo in Todoist');
                                }
                                else if (!todoistTodo && !obsidianTodo.isCompleted) {
                                    fileContents =
                                        fileContents.slice(0, obsidianTodo.startOffset + 3) +
                                            'x' +
                                            fileContents.slice(obsidianTodo.startOffset + 4);
                                    console.log('Completed todo in Obsidian');
                                }
                                else if (todoistTodo &&
                                    todoistTodo.due &&
                                    obsidianTodo.dueDate &&
                                    todoistTodo.due.string != obsidianTodo.dueDate) {
                                    let offset = obsidianTodo.startOffset + obsidianTodo.dueIndex;
                                    fileContents =
                                        fileContents.slice(0, offset) +
                                            `/${todoistTodo.due.string} ` +
                                            fileContents.slice(offset + obsidianTodo.dueLength);
                                    console.log('Updated due date in Obsidian');
                                }
                            }
                            else {
                                if (!todoistProjects) {
                                    console.log('Fetching projects...');
                                    let projectResponse = yield this.api.getProjects();
                                    if (!projectResponse.isOk) {
                                        new obsidian.Notice(`Error fetching projects: ${projectResponse.unwrapErr()}`);
                                        continue;
                                    }
                                    todoistProjects = projectResponse.unwrap();
                                }
                                if (!todoistLabels && obsidianTodo.labels.length > 0) {
                                    console.log('Fetching labels...');
                                    let labelResponse = yield this.api.getLabels();
                                    if (!labelResponse.isOk) {
                                        new obsidian.Notice(`Error fetching labels: ${labelResponse.unwrapErr()}`);
                                        continue;
                                    }
                                    todoistLabels = labelResponse.unwrap();
                                }
                                if (!todoistSections && obsidianTodo.section) {
                                    console.log('Fetching sections...');
                                    let sectionResponse = yield this.api.getSections();
                                    if (!sectionResponse.isOk) {
                                        new obsidian.Notice(`Error fetching sections: ${sectionResponse.unwrapErr()}`);
                                        continue;
                                    }
                                    todoistSections = sectionResponse.unwrap();
                                }
                                var project = todoistProjects.find((project) => project.name == obsidianTodo.project);
                                if (!project) {
                                    console.log('Creating project in Todoist...');
                                    let result = yield this.api.createProject(obsidianTodo.project);
                                    if (result.isOk) {
                                        project = result.unwrap();
                                        todoistProjects.push(project);
                                    }
                                    else {
                                        new obsidian.Notice(`Error creating project: ${result.unwrapErr()}`);
                                        continue;
                                    }
                                }
                                if (obsidianTodo.section && project) {
                                    var section = todoistSections.find((section) => section.name == obsidianTodo.section &&
                                        section.project_id == project.id);
                                    if (!section) {
                                        let result = yield this.api.createSection(obsidianTodo.section, project.id);
                                        if (result.isOk) {
                                            section = result.unwrap();
                                        }
                                        else {
                                            new obsidian.Notice(`Error creating section: ${result.unwrapErr()}`);
                                            continue;
                                        }
                                        if (section) {
                                            todoistSections.push(section);
                                        }
                                    }
                                }
                                if (obsidianTodo.labels.length > 0) {
                                    for (let obsidianLabel of obsidianTodo.labels) {
                                        let label = todoistLabels.find((label) => label.name == obsidianLabel);
                                        if (!label) {
                                            console.log('Creating label in Todoist...');
                                            let result = yield this.api.createLabel(obsidianLabel);
                                            if (result.isOk) {
                                                todoistLabels.push(result.unwrap());
                                            }
                                            else {
                                                new obsidian.Notice(`Error creating label: ${result.unwrapErr()}`);
                                                continue;
                                            }
                                        }
                                    }
                                }
                                console.log('Creating todo in Todoist...');
                                let hash = hashCode(`${obsidianTodo.title}${obsidianTodo.project}${obsidianTodo.labels}`);
                                let linkback = `[ðŸ”—](obsidian://advanced-uri?vault=${encodeURI(this.app.vault.getName())}&filepath=${encodeURI(file.path)}&block=${hash.toString(16)})`;
                                let todoistTodo = yield this.api.createTodo(linkback, obsidianTodo, todoistProjects, todoistSections, todoistLabels);
                                if (todoistTodo.isOk) {
                                    let id = todoistTodo.unwrap().id;
                                    if (obsidianTodo.isCompleted) {
                                        console.log('Closing todo...');
                                        this.api.closeTodo(id);
                                    }
                                    console.log(`Add ${id} to obsidian`);
                                    fileContents =
                                        fileContents.slice(0, obsidianTodo.endOffset) +
                                            ` [ðŸ”—](${this.settings.useWebURL ? 'https://todoist.com/showTask' : 'todoist://task'}?id=${id}) ^${hash.toString(16)}` +
                                            fileContents.slice(obsidianTodo.endOffset);
                                }
                                else {
                                    new obsidian.Notice(`Error creating todo: ${todoistTodo.unwrapErr()}`);
                                }
                            }
                        }
                        this.app.vault.modify(file, fileContents);
                        new obsidian.Notice('Todos updated!');
                    }
                }),
            });
            const token = yield this.app.vault.adapter.read('.obsidian/todoist-token');
            if (token.length > 0) {
                this.api = new TodoistAPI(token);
            }
            else {
                alert('Enter Todoist API token in settings!');
            }
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = TodoistTasksPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
